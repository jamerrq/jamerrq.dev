---
interface Props {
  title: string
  lang?: string
}

const { title, lang = 'en' }: Props = Astro.props
import '@fontsource/merriweather'
import '@fontsource/rubik-doodle-shadow'
import { ViewTransitions } from 'astro:transitions'
import Background from '@components/main/background.astro'
const BODY_CLASS = import.meta.env.MODE === 'development' ? 'debug-screens' : ''
---

<!doctype html>
<html lang={lang}>
  <head>
    <meta charset='UTF-8' />
    <meta name='description' content='jamerrq.dev' />
    <meta name='viewport' content='width=device-width' />
    <link rel='icon' type='image' href='/favicon.png' />
    <meta name='generator' content={Astro.generator} />
    <!-- Open Graph -->
    <meta property='og:title' content='jamerrq.dev' />
    <meta property='og:type' content='personal website' />
    <meta property='og:url' content='https://jamerrq.deno.dev' />
    <meta
      property='og:image'
      content='https://jamerrq.deno.dev/og-image2.png'
    />
    <meta property='og:description' content='Software Developer.' />
    <meta property='og:site_name' content='jamerrq.dev' />
    <!-- Robots -->
    <meta name='robots' content='index, follow' />
    <meta name='googlebot' content='index, follow' />
    <meta name='google' content='notranslate' />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body class={BODY_CLASS}>
    <Background />
    <main
      class='min-h-[100dvh] w-[98dvw] p-2 grid items-center mx-auto justify-center'
    >
      <slot />
    </main>
    <style is:global>
      /* Reset by @souporserious */
      * {
        box-sizing: border-box;
        /* position: relative; */
        min-width: 0;
      }

      body {
        min-height: 100dvh;
      }

      h1,
      h2,
      h3,
      h4 {
        text-wrap: balance;
      }

      p {
        text-wrap: pretty;
      }

      /* @font-face {
        src: url('/fonts/RubikDoodleShadow/RubikDoodleShadow-Regular.woff2');
        font-family: 'Rubik Doodle Shadow';
      } */

      .responsive-text {
        font-size: clamp(1.5rem, 8vw - 2rem, 3rem);
      }
    </style>
    <script defer define:vars={{ lang }}>
      // Theme switch
      function setTheme() {
        const darkIcon = document.getElementById('theme-toggle-dark-icon')
        const lightIcon = document.getElementById('theme-toggle-light-icon')

        // Cambia los iconos dentro del botón en función de la configuración anterior
        if (
          localStorage.getItem('color-theme') === 'dark' ||
          !('color-theme' in localStorage)
        ) {
          lightIcon.classList.remove('hidden')
          // en caso que se haya configurado previamente
          document.documentElement.classList.add('dark')
          // remover la clase light si está presente
          document.documentElement.classList.remove('light')
        } else {
          darkIcon.classList.remove('hidden')
          // en caso que se haya configurado previamente
          document.documentElement.classList.add('light')
          // remover la clase dark si está presente
          document.documentElement.classList.remove('dark')
        }

        const themeToggleBtn = document.getElementById('theme-toggle')

        themeToggleBtn.addEventListener('click', () => {
          darkIcon.classList.toggle('hidden')
          lightIcon.classList.toggle('hidden')

          // se comprueba si se ha configurado previamente
          if (localStorage.getItem('color-theme')) {
            if (localStorage.getItem('color-theme') === 'light') {
              document.documentElement.classList.add('dark')
              // remover la clase light si está presente
              document.documentElement.classList.remove('light')
              localStorage.setItem('color-theme', 'dark')
            } else {
              document.documentElement.classList.remove('dark')
              // remover la clase dark si está presente
              localStorage.setItem('color-theme', 'light')
            }

            // se comprueba si el sistema operativo tiene configurado el tema oscuro
          } else if (document.documentElement.classList.contains('dark')) {
            document.documentElement.classList.remove('dark')
            document.documentElement.classList.add('light')
            localStorage.setItem('color-theme', 'light')
          } else {
            document.documentElement.classList.add('dark')
            document.documentElement.classList.remove('light')
            localStorage.setItem('color-theme', 'dark')
          }
        })
      }

      setTheme()
      document.addEventListener('astro:after-preparation', setTheme)
      document.addEventListener('astro:after-swap', setTheme)

      // Home & Random Place buttons
      const setHomeRandomButton = () => {
        const homeButton = document.getElementById('home-button')
        const randomPlaceButton = document.getElementById('random-place-button')

        // Show home button only if not in home
        // Otherwise show random place button
        if (
          window.location.pathname === '/' ||
          window.location.pathname === '/es'
        ) {
          homeButton.classList.add('hidden')
          randomPlaceButton.classList.remove('hidden')
        } else {
          homeButton.classList.remove('hidden')
          randomPlaceButton.classList.add('hidden')
        }

        // Add click event to home button
        homeButton.addEventListener('click', () => {
          // window.location.href = '/'
          lang === 'es'
            ? (window.location.href = '/es')
            : (window.location.href = '/')
        })

        randomPlaceButton.addEventListener('click', () => {
          const places = ['/blog', '/tech-stack', '/featured']
          window.location.href =
            places[Math.floor(Math.random() * places.length)]
        })
      }

      setHomeRandomButton()
      document.addEventListener('astro:after-preparation', setHomeRandomButton)
      document.addEventListener('astro:after-swap', setHomeRandomButton)
    </script>
  </body>
</html>
