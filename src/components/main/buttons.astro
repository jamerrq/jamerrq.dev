---
interface Props {
  href: string
}

const { href }: Props = Astro.props

const BUTTONS_STYLES = [
  'col-span-2',
  'row-span-1',
  'gap-2',
  'rounded-sm',
  'shadow-[0_0_0.5rem_rgba(0_0_0_0.5)]',
  'flex',
  'items-center',
  'justify-around',
  'responsive-text',
  'border-2',
  'border-emerald-950',
  'dark:border-emerald-300',
  'text-slate-950',
  'font-rubik-doodle',
  'w-full',
  'h-full',
  'transition-all',
  'duration-200',
  'dark:bg-slate-900',
  'dark:text-slate-100',
  'bg-slate-300'
].join(' ')

const BUTTON_STYLES = [
  'dark:hover:text-emerald-300',
  'hover:text-emerald-900',
  'cursor-pointer'
  // 'hover:scale-110',
].join(' ')

import {
  siMicrosofttranslator,
  siKashflow,
  siGithub,
  siGooglecardboard
} from 'simple-icons'

import Home from '@components/icons/home.astro'
import Moon from '@components/icons/moon.astro'
import Sun from '@components/icons/sun.astro'

const BOARD_BUTTON_STYLE =
  process.env.NODE_ENV === 'development' ? '' : 'hidden'
---

<article class={BUTTONS_STYLES} transition:persist>
  <!-- LANGUAGE SWITCH -->
  <a
    class={BUTTON_STYLES}
    title='Switch language en/es'
    id='language-toggle'
    href={href}
  >
    <svg
      class='w-8 h-8 inline-flex fill-slate-950 dark:fill-emerald-300'
      set:html={siMicrosofttranslator.svg}
    />
  </a>
  <!-- HOME OR RANDOM PLACE -->
  <button class={`${BUTTON_STYLES} hidden`} title='go home' id='home-button'>
    <Home class='w-8 h-8 inline-flex fill-slate-950 dark:fill-emerald-300' />
  </button>
  <button
    class={`${BUTTON_STYLES} hidden`}
    title='Go to a random page'
    id='random-place-button'
  >
    <svg
      class='w-8 h-8 inline-flex fill-slate-950 dark:fill-emerald-300'
      set:html={siKashflow.svg}
    />
  </button>
  <!-- THEME SWITCH -->
  <button id='theme-toggle' type='button' title='Switch dark/light theme'>
    <Moon
      class='w-8 h-8 hidden dark:fill-emerald-300'
      id='theme-toggle-dark-icon'
    />
    <Sun
      class='w-8 h-8 hidden dark:fill-emerald-300'
      id='theme-toggle-light-icon'
    />
  </button>
  <!-- SOURCE CODE -->
  <a
    href='https://github.com/jamerrq/jamerrq.dev'
    target='_blank'
    rel='noopener noreferrer'
    class='dark:hover:text-emerald-300 hover:text-emerald-900'
    title='Source code on GitHub'
  >
    <svg
      class='w-8 h-8 inline-flex fill-slate-950 dark:fill-emerald-300'
      set:html={siGithub.svg}
    />
  </a>
  <!-- BOARD -->
  <a
    href='/board'
    class={`${BUTTON_STYLES} ${BOARD_BUTTON_STYLE}`}
    title='Go to the board'
  >
    <svg
      class='w-8 h-8 inline-flex fill-slate-950 dark:fill-emerald-300'
      set:html={siGooglecardboard.svg}
    />
  </a>
</article>

<script defer>
  // Theme switch
  function setTheme() {
    const darkIcon = document.getElementById('theme-toggle-dark-icon')
    const lightIcon = document.getElementById('theme-toggle-light-icon')

    // Cambia los iconos dentro del botón en función de la configuración anterior
    if (
      localStorage.getItem('color-theme') === 'dark' ||
      (!('color-theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      lightIcon.classList.remove('hidden')
      // en caso que se haya configurado previamente
      document.documentElement.classList.add('dark')
    } else {
      darkIcon.classList.remove('hidden')
    }

    const themeToggleBtn = document.getElementById('theme-toggle')

    themeToggleBtn.addEventListener('click', () => {
      darkIcon.classList.toggle('hidden')
      lightIcon.classList.toggle('hidden')

      // se comprueba si se ha configurado previamente
      if (localStorage.getItem('color-theme')) {
        if (localStorage.getItem('color-theme') === 'light') {
          document.documentElement.classList.add('dark')
          localStorage.setItem('color-theme', 'dark')
        } else {
          document.documentElement.classList.remove('dark')
          localStorage.setItem('color-theme', 'light')
        }

        // se comprueba si el sistema operativo tiene configurado el tema oscuro
      } else if (document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.remove('dark')
        localStorage.setItem('color-theme', 'light')
      } else {
        document.documentElement.classList.add('dark')
        localStorage.setItem('color-theme', 'dark')
      }
    })
  }

  setTheme()
  document.addEventListener('astro:after-preparation', setTheme)
  document.addEventListener('astro:after-swap', setTheme)

  // Home & Random Place buttons
  const setHomeRandomButton = () => {
    const homeButton = document.getElementById('home-button')
    const randomPlaceButton = document.getElementById('random-place-button')

    // Show home button only if not in home
    // Otherwise show random place button
    if (window.location.pathname === '/') {
      homeButton.classList.add('hidden')
      randomPlaceButton.classList.remove('hidden')
    } else {
      homeButton.classList.remove('hidden')
      randomPlaceButton.classList.add('hidden')
    }

    // Add click event to home button
    homeButton.addEventListener('click', () => {
      window.location.href = '/'
    })

    randomPlaceButton.addEventListener('click', () => {
      const places = ['/blog', '/tech-stack', '/featured']
      window.location.href = places[Math.floor(Math.random() * places.length)]
    })
  }

  setHomeRandomButton()
  document.addEventListener('astro:after-preparation', setHomeRandomButton)
  document.addEventListener('astro:after-swap', setHomeRandomButton)

  // Language switch
  const setLanguageToggle = () => {
    const languageToggle = document.getElementById('language-toggle')

    // Add click event to language toggle button
    languageToggle.addEventListener('click', () => {
      const currentLanguage = window.location.pathname.split('/').at(1) || 'en'
      // if path starts with /es then remove it
      // else add /es
      // window.alert(currentLanguage)
      const newUrl =
        currentLanguage === 'es'
          ? window.location.pathname.replace('/es', '')
          : `/es${window.location.pathname}`
      window.location.href = newUrl
    })
  }

  setLanguageToggle()
  document.addEventListener('astro:after-preparation', setLanguageToggle)
  document.addEventListener('astro:after-swap', setLanguageToggle)
</script>
