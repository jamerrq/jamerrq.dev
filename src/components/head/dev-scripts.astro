---
interface Props {
  lang?: string
}

const { lang = 'en' } = Astro.props

// @ts-ignore
import { pwaInfo } from 'virtual:pwa-info'
---

<script defer is:inline define:vars={{ lang }}>
  // Theme switch
  function setTheme() {
    const darkIcon = document.getElementById('theme-toggle-dark-icon')
    const lightIcon = document.getElementById('theme-toggle-light-icon')

    // Cambia los iconos dentro del bot칩n en funci칩n de la configuraci칩n anterior
    if (
      localStorage.getItem('color-theme') === 'dark' ||
      !('color-theme' in localStorage)
    ) {
      lightIcon?.classList?.remove('hidden')
      // en caso que se haya configurado previamente
      document.documentElement?.classList?.add('dark')
      // remover la clase light si est치 presente
      document.documentElement?.classList?.remove('light')
    } else {
      darkIcon?.classList?.remove('hidden')
      // en caso que se haya configurado previamente
      document.documentElement?.classList?.add('light')
      // remover la clase dark si est치 presente
      document.documentElement?.classList?.remove('dark')
    }

    const themeToggleBtn = document.getElementById('theme-toggle')

    themeToggleBtn?.addEventListener('click', () => {
      darkIcon?.classList?.toggle('hidden')
      lightIcon?.classList?.toggle('hidden')

      // se comprueba si se ha configurado previamente
      if (localStorage.getItem('color-theme')) {
        if (localStorage.getItem('color-theme') === 'light') {
          document.documentElement?.classList?.add('dark')
          // remover la clase light si est치 presente
          document.documentElement?.classList?.remove('light')
          localStorage.setItem('color-theme', 'dark')
        } else {
          document.documentElement?.classList?.remove('dark')
          // remover la clase dark si est치 presente
          localStorage.setItem('color-theme', 'light')
        }

        // se comprueba si el sistema operativo tiene configurado el tema oscuro
      } else if (document.documentElement?.classList?.contains('dark')) {
        document.documentElement?.classList?.remove('dark')
        document.documentElement?.classList?.add('light')
        localStorage.setItem('color-theme', 'light')
      } else {
        document.documentElement?.classList?.add('dark')
        document.documentElement?.classList?.remove('light')
        localStorage.setItem('color-theme', 'dark')
      }
    })
  }

  setTheme()
  document.addEventListener('astro:after-preparation', setTheme)
  document.addEventListener('astro:after-swap', setTheme)

  // Home & Random Place buttons
  const setHomeRandomButton = () => {
    const homeButton = document.getElementById('home-button')
    const randomPlaceButton = document.getElementById('random-place-button')

    // Show home button only if not in home
    // Otherwise show random place button
    if (
      window.location.pathname === '/' ||
      window.location.pathname === '/es'
    ) {
      homeButton?.classList?.add('hidden')
      randomPlaceButton?.classList?.remove('hidden')
    } else {
      homeButton?.classList?.remove('hidden')
      randomPlaceButton?.classList?.add('hidden')
    }

    // Add click event to home button
    homeButton?.addEventListener('click', () => {
      // window.location.href = '/'
      lang === 'es'
        ? (window.location.href = '/es')
        : (window.location.href = '/')
    })

    randomPlaceButton?.addEventListener('click', () => {
      const places = ['/blog', '/tech-stack', '/featured']
      window.location.href = places[Math.floor(Math.random() * places.length)]
    })
  }

  setHomeRandomButton()
  document.addEventListener('astro:after-preparation', setHomeRandomButton)
  document.addEventListener('astro:after-swap', setHomeRandomButton)
</script>

<script>
  import { toast } from 'wc-toast'
  const copyMailButton = document.getElementById('copyMailButton')
  copyMailButton?.addEventListener('click', () => {
    navigator.clipboard.writeText('jamerrq@gmail.com')
    toast('email shipped into your clipboard 游닓', {
      duration: 2000,
      theme: {
        type: 'light'
      }
    })
  })
</script>
<script src='/src/pwa.ts'></script>
{
  // eslint-disable-next-line
  pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />
}
